@forward "../../../src/scss/general";
@use "../../../src/scss/general" as general;

:root {
  --bounceEasing: cubic-bezier(0.51, 0.92, 0.24, 1.15);
}
a[href^="http"]:hover:after {
  content: " (" attr(href) " )";
  background-color: antiquewhite;
}

dialog {
  max-width: max-content;
  padding: 40px 70px;
  margin: 0 auto;
  margin-top: 4rem;
  cursor: pointer;
  border: 8px solid general.$colorPrimario;
  background-color: #fafafa;
  // transition: all 1s ease-in; /* hacemos una pequeña transición */

  // $propiedades: aparecer 0.5s ease-in-out;
  // @include defAnimacion($propiedades);
  // // llamamos al mixin que generará el fotograma clave
  // @include keyframes("aparecer") {
  //     @include animacionAparecer();
  // }

  &::backdrop {
    background-color: general.$colorSecundario;
  }

  h2 {
    padding-bottom: 1rem;
  }
}
// herencia
%colorFondo {
  background-color: general.$colorSecundario;
}
.modal {
  p + p {
    margin-top: 1rem;
  }

  &__dialog {
    position: relative;
    max: {
      width: 800px;
      height: 80vh;
    }
    border-radius: 5px;
    background-color: white;
    overflow: auto;
    cursor: default;
    @include general.flex($direccion: column, $wrap: nowrap);

    & > * {
      padding: 1rem;
    }
  }

  &__header {
    @include general.anchoAlto();
    @extend %colorFondo;
    @include general.flex($direccion: row, $justify: space-between);
    .close-modal {
      font-size: 1.5rem;
    }
  }

  &.is-visible {
    visibility: visible;
    opacity: 1;
  }

  &__footer {
    @extend %colorFondo;
    @include general.anchoAlto();
  }
}

/* Estilos de las animaciones */
[data-animation] {
  .modal__dialog {
    opacity: 0;
    transition: all 0.5s var(--bounceEasing); // la transición se hace al meter la propiedad .is-visible ya que es cuando cambian propiedades
  }

  &.is-visible {
    .modal__dialog {
      opacity: 1;
      // transform: none;
      transition-delay: 0.2s;
    }
  }
}
// al cargar la página y tener definida el data-animation la ventana modal__dialog tiene
// una transformación que al añadir la propiedad .is-visible al elemento que tiene
// la animación definida deja de aplicarse realizandose el efecto de la animación
[data-animation="slideInOutDown"] {
  .modal__dialog {
    transform: translateY(100%);
  }
}

[data-animation="slideInOutTop"] {
  .modal__dialog {
    transform: translateY(-100%);
  }
}
[data-animation="slideInOutLeft"] {
  .modal__dialog {
    transform: translateX(-100%);
  }
}

[data-animation="slideInOutRight"] {
  .modal__dialog {
    transform: translateX(100%);
  }
}

[data-animation="zoomInOut"] {
  .modal__dialog {
    transform: scale(0.2);
  }
}

[data-animation="rotateInOutDown"] {
  .modal__dialog {
    transform-origin: top left;
    transform: rotate(-1turn); /* rotar una vuelta al revés */
  }
}

[data-animation="slideInOutDown"].is-visible .modal__dialog,
[data-animation="slideInOutTop"].is-visible .modal__dialog,
[data-animation="slideInOutLeft"].is-visible .modal__dialog,
[data-animation="slideInOutRight"].is-visible .modal__dialog,
[data-animation="zoomInOut"].is-visible .modal__dialog,
[data-animation="rotateInOutDown"].is-visible .modal__dialog {
  transform: none;
}

[data-animation="mixInAnimations"] {
  &.is-visible .modal__dialog {
    $propiedades: mixInAnimations 2s 0.2s linear forwards;
    @include general.defAnimacion($propiedades);
    // llamamos al mixin que generará el fotograma clave
    @include general.keyframes("mixInAnimations") {
      0% {
        transform: translateX(-100%);
      }

      10% {
        transform: translateX(0);
      }

      20% {
        transform: rotate(20deg);
      }

      30% {
        transform: rotate(-20deg);
      }

      40% {
        transform: rotate(15deg);
      }

      50% {
        transform: rotate(-15deg);
      }

      60% {
        transform: rotate(10deg);
      }

      70% {
        transform: rotate(-10deg);
      }

      80% {
        transform: rotate(5deg);
      }

      90% {
        transform: rotate(-5deg);
      }

      100% {
        transform: rotate(0deg);
      }
    }
  }
}
